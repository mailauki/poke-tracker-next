import React from 'react'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import Header from '../components/Header'
import Pokemon from '../components/Pokemon'
import { Swiper, SwiperSlide } from 'swiper/react'
import { Navigation } from 'swiper'
import 'swiper/css'
import 'swiper/css/navigation'
import { createTheme, ThemeProvider, useMediaQuery, CssBaseline, Button } from '@mui/material'
import { useSupabaseClient } from '@supabase/auth-helpers-react'

export default function Home() {
  const [pokemons, setPokemons] = React.useState([{id: 1}, {id: 2}, {id: 3}])
  const [checks, setChecks] = React.useState([])
  const [next, setNext] = React.useState(null)
  const [open, setOpen] = React.useState(false)
  const prefersDarkMode = useMediaQuery("(prefers-color-scheme: dark)")
  const supabase = useSupabaseClient()

  const theme = React.useMemo(
    () => createTheme({
      palette: {
        mode: prefersDarkMode ? "dark" : "light"
      }
    }), [prefersDarkMode]
  )

  React.useEffect(() => {
    fetch("https://pokeapi.co/api/v2/pokemon?offset=0&limit=9")
    .then((r) => r.json())
    .then((data) => {
      setPokemons(data.results)
      setNext(data.next)
    })
  }, [])

  function append() {
    fetch(next)
    .then((r) => r.json())
    .then((data) => {
      setPokemons([...pokemons, data.results].flat())
      setNext(data.next)
    })
  }

  React.useEffect(() => {
    getPokemon()
  }, [])

  async function getPokemon() {
    let { data } = await supabase
      .from('pokemon')
      .select('*')

    // console.log(data)
    setChecks(data)
  }

  // console.log(checks.find((check) => 1 === check.id).isCollected)
  // console.log(pokemons.map((pokemon) => checks.find((check) => pokemon.name === check.name)))
  const result = pokemons.map((pokemon) => (
    checks.find((check) => (
      pokemon.name === check.name
    ))
  ))

  console.log(result !== "undefined" ? result.isCollected : false)
  
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />

      <div className={styles.container}>
        <Head>
          <title>PokeTracker</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/pokeball-dark.ico" media="(prefers-color-scheme: dark)" />
          {/* <link rel="icon" href="/pokeball-dark.png" media="(prefers-color-scheme: dark)" type="image/png" /> */}
          <link rel="icon" href="/pokeball-light.ico" media="(prefers-color-scheme: light)" />
          {/* <link rel="icon" href="/pokeball-light.png" media="(prefers-color-scheme: light)" type="image/png" /> */}
          <link rel="icon" href="/pokeball.ico" media="(prefers-color-scheme: no-preference)" />
          {/* <link rel="icon" href="/pokeball.png" media="(prefers-color-scheme: no-preference)" type="image/png" /> */}
        </Head>

        <Header onOpen={setOpen} />

        <main className={styles.main}>
          {/* <h1>
            <a href="/api/hello">Hello</a>
          </h1> */}

          {!open ? (
            <>
              <ul className={styles.grid}>
                {pokemons.map((pokemon) => (
                  <Pokemon 
                    key={pokemon.name} 
                    pokemon={pokemon} 
                    open={open} 
                    onOpen={(open) => setOpen(open)} 
                    checked={checks.find((check) => pokemon.name === check.name)}
                  />
                ))}
              </ul>
              
              <Button 
                onClick={() => append()} 
                variant="outlined"
              >
                Load More
              </Button>
            </>
          ) : (
            <Swiper 
              className={styles.swiper}
              modules={[Navigation]}
              navigation
              onReachEnd={() => append()}
              onSwiper={(swiper) => swiper.slideTo(open-1)}
            >
              {pokemons.map((pokemon) => (
                <SwiperSlide className={styles.slide} key={pokemon.name}>
                  <Pokemon 
                    pokemon={pokemon} 
                    open={open} 
                    onOpen={(open) => setOpen(open)} 
                  />
                </SwiperSlide>
              ))}
            </Swiper>
          )}
        </main>
      </div>
    </ThemeProvider>
  )
}
